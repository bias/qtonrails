NOTES FOR WIP_FORMS BRANCH
==========================
This branch is way ahead of master in terms of development, features and stability. It's still rough around the edges. If you'd like a play then you can certainly run through the following steps to understand how qtonrails works. Here goes...


1. Ensure that you have at least one record in the database for the Rails model you are about to Qt-ify

2. We've fixed an issue that used to require a step here

3. Then do the following from the top level of your Rails project
./script/generate qform Toy
./script/generate qpresenters
./script/generate qtablemodel Toy
./script/generate qcontroller Toy
./script/generate qview Toy
./script/generate qmainwindow
./script/generate qmainwindow # NNB: Must do this last step twice!!! Dunno why


4. We've fixed an issue that used to require a step here

5. Finally, from within the vendor/plugins/qtonrails/ directory, execute the ./run command

What should happen?
You should get to the list screen for your chosen model, which also acts as a home page. You can edit data directly in the grid. Or else you can click the edit button which (kinda) works - it will always bring up record 1 in your db for editing.

The idea of this initial release is to show the kind of workflow possible out of the box with qtonrails; and also to help make architectural decisions such as how will we do things like the routing and lots lots more. If you fancy hacking on this project then please fire ahead. I'd be delighted to hear from you if you're interested in this project.

THE REST OF THE README NOW CONTINUES THOUGH IS, IN PLACES, OUT OF DATE!

qtonrails
=========

This is currently an early attempt at building a simple framework that would let a developer comfortable with Rails generate a runnable Qt4 project. When we say early attempt, we really mean it. So far you can generate a Qt form from from a Rails model.


example
=======

Given a model called Product which exists in your app/models directory, you can

./script/generate qform Product

to create the file vendor/plugins/qtonrails/app/qforms/product_qform.ui

Open the form in Qt Designer to see what's been generated, on Kubuntu for example,

designer-qt vendor/plugins/qtonrails/app/qforms/product_qform.ui

Hey presto! You should see the generated Qt form for the Rails Product model.

To add domain logic behind this qform run

./script/generate qpresenters

This will generate a presenter file for each form in vendor/plugins/qtonrails/app/qforms directory. After running you should have a product_qform.rb file in the vendor/plugins/qtonrails/app/qpresenters directory. You can edit this file to change the presentation logic that controls the qform.

Note: For each qform, this step also auto-generates a .ui.rb file in the vendor/plugins/qtonrails/app/ui_proxies directory. These .ui.rb files are a Ruby code representation of the Qt Designer .ui files. You should never hand edit these files as they will be overwritten on calling this generator again. Instead change the presenter files.

installation
============

Easily installed as a Rails plugin:

./script/plugin install git://github.com/theirishpenguin/qtonrails.git


whoami
======

My name is Declan McGrath. I'm a commercial Ruby developer and an Open Source enthusiast quitely watching the Irish FOSS scene burn brightly. You can follow me on Twitter at http://twitter.com/theirishpenguin and some people have even been known to get me at the email declan [AT] weuseopensource.com :-) For more information on the man behind the mouse you can check out https://wiki.ubuntu.com/declanmg

contribute
==========

Patches appreciated and you are cordially invited to get involved with the qtonrails project at any level. In particular, we are looking for people with some experience of Qt to help guide us on where to go with this plugin. Get in contact using the details listed above.


Copyright (c) 2009 [Declan McGrath], released under the MIT license
